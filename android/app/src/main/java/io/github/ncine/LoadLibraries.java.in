package @NCINE_REVERSE_DNS@;

import android.app.NativeActivity;
import android.content.ComponentName;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.hardware.display.DisplayManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.view.View;
import android.view.WindowInsets;
import android.view.WindowInsetsController;
import android.view.WindowManager;
import @NCINE_REVERSE_DNS@.Keep;

public class LoadLibraries extends NativeActivity implements DisplayManager.DisplayListener {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

		// Hide toolbar
		int SDK_INT = android.os.Build.VERSION.SDK_INT;
		if (SDK_INT >= 19 && SDK_INT < 30) {
			setImmersiveSticky();

			View decorView = getWindow().getDecorView();
			decorView.setOnSystemUiVisibilityChangeListener(
				new View.OnSystemUiVisibilityChangeListener() {
					@Override
					public void onSystemUiVisibilityChange(int visibility) {
						setImmersiveSticky();
					}
				}
			);
		} else if (SDK_INT >= 30) {
			hideInsets();
		}
		
		if (SDK_INT >= android.os.Build.VERSION_CODES.P) {
			getWindow().getAttributes().layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
		}
		
		// Register a display listener to update the monitors array
		DisplayManager dm = getSystemService(DisplayManager.class);
		dm.registerDisplayListener(this, null);
	}

	@Override
	protected void onResume() {
		super.onResume();

		// Hide toolbar
		int SDK_INT = android.os.Build.VERSION.SDK_INT;
		if (SDK_INT >= 11 && SDK_INT < 14) {
			getWindow().getDecorView().setSystemUiVisibility(View.STATUS_BAR_HIDDEN);
		} else if (SDK_INT >= 14 && SDK_INT < 19) {
			getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_LOW_PROFILE);
		} else if (SDK_INT >= 19 && SDK_INT < 30) {
			setImmersiveSticky();
		} else if (SDK_INT >= 30) {
			hideInsets();
		}
	}

	@Override
	public void onDisplayAdded(int displayId) {
		nativeUpdateMonitors();
	}

	@Override
	public void onDisplayChanged(int displayId) {
		nativeUpdateMonitors();
	}

	@Override
	public void onDisplayRemoved(int displayId) {
		nativeUpdateMonitors();
	}

	@Keep
	public String getPreferredLanguage() {
		try {
			java.util.Locale currentLocale;
			if (android.os.Build.VERSION.SDK_INT < 24) {
				currentLocale = getResources().getConfiguration().locale;
			} else {
				currentLocale = getResources().getConfiguration().getLocales().get(0);
			}
			return currentLocale.getLanguage() + "-" + currentLocale.getCountry();
		} catch (Exception ignored) {
			return null;
		}
	}

	@Keep
	public boolean hasExternalStoragePermission() {
		if (android.os.Build.VERSION.SDK_INT < 30) {
			return false;
		}
		
		try {
			return Environment.isExternalStorageManager();
		} catch (Exception ignored) {
			return false;
		}
	}

	@Keep
	public void requestExternalStoragePermission() {
		if (android.os.Build.VERSION.SDK_INT < 30) {
			return;
		}
	
		try {
			Uri uri = Uri.parse("package:" + BuildConfig.APPLICATION_ID);
			Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION, uri);
			startActivity(intent);
		} catch (Exception ignored) {
			try {
				Intent intent = new Intent();
				intent.setAction(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);
				startActivity(intent);
			} catch (Exception ignored2) {
			}
		}
	}
	
	@Keep
	public void setActivityEnabled(String activityName, boolean enable) {
		getPackageManager().setComponentEnabledSetting(
			new ComponentName(this, BuildConfig.APPLICATION_ID + activityName), 
			(enable ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED),
			PackageManager.DONT_KILL_APP);
	}

	void setImmersiveSticky() {
		View decorView = getWindow().getDecorView();
		decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN |
										View.SYSTEM_UI_FLAG_HIDE_NAVIGATION |
										View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY |
										View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN |
										View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |
										View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
	}

	void hideInsets() {
		getWindow().setDecorFitsSystemWindows(false);
		WindowInsetsController controller = getWindow().getInsetsController();
		controller.hide(WindowInsets.Type.statusBars() | WindowInsets.Type.navigationBars());
		controller.setSystemBarsBehavior(WindowInsetsController.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE);
	}

	// Calls `EglGfxDevice::updateMonitorsFromJni()`
	private native void nativeUpdateMonitors();

	static {
		@JAVA_SYSTEM_LOADLIBRARY_OPENAL@
		@JAVA_SYSTEM_LOADLIBRARY_NCINE@
		// It needs to be explicitly loaded for `jnicall_functions` to work (despite `android.app.lib_name`)
		try {
			System.loadLibrary("game");
		} catch (UnsatisfiedLinkError e) {
			System.err.println("Caught UnsatisfiedLinkError: " + e.getMessage());
		}
	}

}
